public class User
{
    public int Id { get; set; }
    public long TelegramId { get; set; }
    public string Username { get; set; } = string.Empty;
    public string FirstName { get; set; } = string.Empty;
    public string? LastName { get; set; }

    public int Lemons { get; set; } = 0;
    public int Level { get; set; } = 1;

    public DateTime LastActiveTime { get; set; }
    public DateTime? LastLoginDate { get; set; }
    public DateTime? LastDailyBonusClaimed { get; set; }
    public TimeSpan TotalOnlineTime { get; set; } = TimeSpan.Zero;

    public List<string> Achievements { get; set; } = new();

    // –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    public void UpdateLevel()
    {
        var newLevel = 1;
        if (Lemons >= 1000) newLevel = 5;
        else if (Lemons >= 500) newLevel = 4;
        else if (Lemons >= 200) newLevel = 3;
        else if (Lemons >= 100) newLevel = 2;

        if (newLevel > Level)
        {
            Level = newLevel;
            CheckAndAddAchievement($"üèÜ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å {Level}");
        }
    }

    // –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    public void CheckAchievements(string taskType)
    {
        switch (taskType.ToLower())
        {
            case "read book" when !Achievements.Contains("üìö –ü—Ä–æ—á–∏—Ç–∞–ª –∫–Ω–∏–≥—É"):
                Achievements.Add("üìö –ü—Ä–æ—á–∏—Ç–∞–ª –∫–Ω–∏–≥—É");
                break;
            case "clean floors" when !Achievements.Contains("üßΩ –ü–æ—á–∏—Å—Ç–∏–ª –ø–æ–ª—ã"):
                Achievements.Add("üßΩ –ü–æ—á–∏—Å—Ç–∏–ª –ø–æ–ª—ã");
                break;
        }

        if (Lemons >= 1000 && !Achievements.Contains("üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ 1000+ –ª–∏–º–æ–Ω–æ–≤"))
        {
            Achievements.Add("üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ 1000+ –ª–∏–º–æ–Ω–æ–≤");
        }

        if ((DateTime.UtcNow - LastLoginDate).TotalDays >= 3 &&
            !Achievements.Contains("üî• –ê–∫—Ç–∏–≤–µ–Ω 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥"))
        {
            Achievements.Add("üî• –ê–∫—Ç–∏–≤–µ–Ω 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥");
        }
    }

    public void CheckAndAddAchievement(string achievement)
    {
        if (!Achievements.Contains(achievement))
        {
            Achievements.Add(achievement);
        }
    }

    public void AddLemons(int amount)
    {
        Lemons += amount;
        UpdateLevel();
    }

    public void UpdateActivity()
    {
        var now = DateTime.UtcNow;

        if (LastActiveTime != default)
        {
            TotalOnlineTime += now - LastActiveTime;
        }

        if (LastLoginDate.HasValue && (now - LastLoginDate.Value).TotalDays >= 1)
        {
            CheckAndAddAchievement("üìÖ –ü–æ—Å–µ—Ç–∏–ª —Å–∞–π—Ç –Ω–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å");
        }

        LastActiveTime = now;
        LastLoginDate = now;
    }

    public bool CanClaimDailyBonus()
    {
        return LastDailyBonusClaimed == null || 
               (DateTime.UtcNow - LastDailyBonusClaimed.Value).TotalDays >= 1;
    }

    public void ClaimDailyBonus()
    {
        AddLemons(500); // –ë–æ–Ω—É—Å –∑–∞ –≤—Ö–æ–¥
        LastDailyBonusClaimed = DateTime.UtcNow;
    }
}